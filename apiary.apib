FORMAT: 1A
HOST: http://opencorpora.org/

# OpenCorporaTest api

Description of API methods

## Types collection [/types/uid={uid}&token={token}]

### Pull types [GET]

+ Parameters
    + uid (required, number, `123456`) ... User identity
    + token (required, string, `kj54hb6lkj54kl456`) ... Auth token

+ Response 200 (application/json)
    + Body

            {
                "count": 2,
                "items": [
                    {
                        "type_id": 1,
                        "name": "Прилагательное, мн.ч.: именительный / винительный",
                        "complexity": 10
                    },
                    {
                        "type_id": 2,
                        "name": "Существительное, ед. ч.: родительный / дательный / предложный",
                        "complexity": 5
                    }
                ]
            }

## Task Collection [/task/uid={uid}&type={type}&count={count}&token={token}]


### Pull tasks [GET]

+ Parameters
    + uid (required, number, `2133`) ... User identity
    + type (required, number, `1`) ... Task type identity
    + count (required, number, `10`) ... Max count of tasks in response
    + token (required, string, `kj54hb6lkj54kl456`) ... Auth token
    
+ Response 200 (application/json)
    
    + Body 

            {
                "count": 1,
                "items": [
                    {
                        "id": 123,
                        "target": "одной",
                        "left_context": "Недопустимо , чтобы",
                        "right_context": "из подсистем являлась сама",
                        "has_instruction": true,
                        "choices": [
                            {
                                "1": "родительный"
                            },
                            {
                                "2": "дательный"
                            },
                            {
                                "3": "винительный"
                            },
                            {
                                "4": "предложный"
                            }
                        ]
                    }
                ]
            }

## Task Actualize [/task/actualize/uid={uid}&token={token}]

### Actualize [POST]

+ Parameters 
    + uid (required, number, `123456`) ... User identity
    + token (required, string, `kj54hb6lkj54kl456`) ... Auth token

+ Request (application/json)
    
    + Body

            {
                "count": 3
                "items": [
                    123,
                    145,
                    3456
                ]
            }

+ Response 200 (application/json)
    
    + Body 
        

            { 
                "items": [123]
            }


## Task Receiver [/task/push/uid={uid}&token={token}]

### Push [POST]

+ Parameters 
    + uid (required, number, `123456`) ... User identity
    + token (required, string, `kj54hb6lkj54kl456`) ... Auth token

+ Request (application/json)
    

    
    + Body
    
            {
                "count": 3,
                "items": [
                    {
                        "id": 1,
                        "answer": -1,
                        "seconds_before_answer": 23,
                        "is_left_context_showed": true,
                        "is_right_context_showed": false,
                        "commented": true,
                        "comment_text": "very difficult question"
                    },
                    {
                        "id": 2,
                        "answer": 2,
                        "seconds_before_answer": 2,
                        "is_left_context_showed": false,
                        "is_right_context_showed": false,
                        "commented": false,
                        "comment_text": null
                    }
                ]
            }

+ Response 200 (application/json)

    + Body
    
            {
                "count": 1
            }

